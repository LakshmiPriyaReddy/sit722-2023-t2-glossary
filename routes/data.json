[
    {"ID#":1, "Term":"DevOps",
    "Description":"DevOps is a set of practices and cultural philosophies that aim to automate and integrate the processes between software development and IT operations teams. It emphasizes collaboration, communication, and the use of tools to increase the efficiency and speed of software delivery while maintaining stability and reliability.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing,"},

    {"ID#":2, "Term":"Waterfall Model","Description":"The Waterfall model is a traditional software development approach where each phase of the development process follows a linear, sequential order. It starts with gathering requirements and progresses through design, implementation, testing, deployment, and maintenance. Changes in requirements during later stages can be challenging to implement.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing,"},
    {"ID#":3, "Term":"Continuous Integration (CI)","Description":"Continuous Integration is a software development practice where developers frequently integrate their code into a shared repository. Each integration triggers automated tests to detect and fix integration issues early, ensuring that the codebase remains stable.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing, "},

    {"ID#":4, "Term":"Continuous Deployment (CD):","Description":"Continuous Deployment is an extension of Continuous Integration, where every code change that passes automated tests is automatically deployed to production. It aims to achieve a faster and more frequent release cycle.",
    "References":"Vadapalli, S. 2018, DevOps : continuous delivery, integration, and deployment with DevOps : dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing,"},

    {"ID#":5, "Term":"Agile Development","Description":"Agile is an iterative and incremental approach to software development. It emphasizes collaboration, flexibility, and customer feedback to deliver value to customers quickly and adapt to changing requirements.",
    "References":"Vadapalli, S. 2018, DevOps : continuous delivery, integration, and deployment with DevOps : dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing,"},

    {"ID#":6, "Term":"Version Control","Description":"Version control, also known as source control, is the practice of tracking changes to code or files over time. It allows multiple developers to collaborate on a project, manage different versions of the code, and revert to previous versions if needed. Git is a popular version control system.",
    "References":"Vadapalli, S. 2018, DevOps : continuous delivery, integration, and deployment with DevOps : dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing,"},

    {"ID#":7, "Term":"Microservices","Description":"Microservices is an architectural style where a large application is broken down into smaller, loosely coupled services. Each service can be developed, deployed, and scaled independently, allowing for easier maintenance and scalability.",
    "References":"Enterprise DevOps for Architects : Leveraging AIops and DevSecOps for secure digital transformation / Jeroen Mulder, Packt Publishing"},
    {"ID#":8, "Term":"Scrum","Description":"Scrum is an agile framework for managing and developing software. It emphasizes iterative and incremental development, with fixed-length iterations called sprints. Scrum includes ceremonies like daily stand-ups, sprint planning, sprint review, and sprint retrospective.",
    "References":"Vadapalli, S. 2018, DevOps : continuous delivery, integration, and deployment with DevOps : dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing,"},

    {"ID#":9, "Term":"Continuous Testing","Description":"Continuous Testing is the process of running automated tests throughout the software development lifecycle to obtain rapid feedback on the quality of the code. It is an integral part of CI/CD pipelines to catch and fix defects early in the development process.",
    "References":"Vadapalli, S. 2018, DevOps : continuous delivery, integration, and deployment with DevOps : dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing,"},

    {"ID#":10, "Term":"Infrastructure as a Service (IaaS)","Description":"Infrastructure as a Service is a cloud computing model where virtualized computing resources (such as servers, storage, and networking) are provided over the internet. IaaS allows developers to access and manage infrastructure resources on-demand without having to manage physical hardware.",
    "References":"Enterprise DevOps for Architects : Leveraging AIops and DevSecOps for secure digital transformation / Jeroen Mulder, Packt Publishing"},
    {"ID#":11, "Term":"Continuous Integration (CI)","Description":"Continuous Integration is a software development practice where developers frequently integrate their code into a shared repository. Each integration triggers automated tests to detect and fix integration issues early, ensuring that the codebase remains stable.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing"},
    {"ID#":12, "Term":"Scrum","Description":"Scrum is an agile framework for managing and developing software. It emphasizes iterative and incremental development, with fixed-length iterations called sprints. Scrum includes ceremonies like daily stand-ups, sprint planning, sprint review, and sprint retrospective.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing"},
    {"ID#":13, "Term":"Monitoring","Description":" Monitoring involves tracking the performance and health of applications and infrastructure to detect and respond to issues. Observability goes beyond traditional monitoring and emphasizes capturing and analyzing system behavior, making it easier to understand and troubleshoot complex systems.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing,"},
    {"ID#":14, "Term":"Git","Description":"Git is a distributed version control system used for tracking changes in source code during software development. It allows multiple developers to collaborate on projects, track changes, and manage different versions of code.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing,"},
    {"ID#":15, "Term":"Kubernetes","Description":"Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It provides tools for automating the deployment, scaling, and operation of application containers across clusters of hosts.",
    "References":"Coupland, M., 2021, DevOps Adoption Strategies : Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing,"},
    {"ID#":16, "Term":"Deployment Pipeline","Description":" A deployment pipeline is a set of automated processes that allow code changes to be tested and deployed to production in a controlled and repeatable manner. It typically includes stages like building, testing, and deploying code.",
    "References":"Enterprise DevOps for Architects : Leveraging AIops and DevSecOps for secure digital transformation / Jeroen Mulder, Packt Publishing"},
    {"ID#":17, "Term":"Infrastructure Automation","Description":"Infrastructure automation refers to the use of tools and scripts to automate the provisioning, configuration, and management of infrastructure resources. It reduces manual intervention and ensures consistency.",
    "References":"Enterprise DevOps for Architects : Leveraging AIops and DevSecOps for secure digital transformation / Jeroen Mulder, Packt Publishing"},
    {"ID#":18, "Term":"Branching","Description":"Branching occurs when an object under review in source control is duplicated so that other developers can work on it concurrently.",
    "References":"https://www.plutora.com/devops-at-scale/terminology-glossary"},
    {"ID#":19, "Term":"Commit","Description":"The process of pushing code to a source code repository and logging the changes that were made.",
    "References":"https://www.plutora.com/devops-at-scale/terminology-glossary"},
    {"ID#":20, "Term":"Infrastructure ","Description":"The whole complex of hardware, software, and processes required to run apps, as well as to collect, manage and store data. One of the most important benefits of DevOps practices is using the immutable infrastructure, which means that in case of error a clean state of infrastructure is launched immediately, rather than trying to fix the issue and suffering from downtime in the process.",
    "References":"https://itsvit.com/blog/devops-glossary-78-basic-devops-terms-in-simple-words/"},
    {"ID#":21, "Term":"YAML File ","Description":"A YAML (YAML Ain't Markup Language) file is a human-readable data serialization format used for configuration files. It uses indentation to represent data structures and is commonly used for configuration files in DevOps, including Docker Compose and Kubernetes configurations.",
    "References":"https://yaml.org/"},
    {"ID#":22, "Term":"Docker ","Description":"Docker is a platform for developing, shipping, and running applications in containers. Containers are lightweight, portable, and isolated environments that package applications and their dependencies, allowing them to run consistently across different environments.",
    "References":"https://www.docker.com/what-docker"},
    {"ID#":23, "Term":"Container Image ","Description":"A container image is a standalone, executable package that includes an application and all its dependencies, along with metadata on how to run the application. Docker images are a common type of container image.",
    "References":"https://docs.docker.com/glossary/?term=image"},
    {"ID#":24, "Term":"Dockerfile ","Description":"A Dockerfile is a text file that contains a set of instructions for building a Docker image. It specifies the base image, sets up the environment, installs dependencies, and defines how the application should run within the container.",
    "References":"https://docs.docker.com/glossary/?term=Dockerfile"},
    {"ID#":25, "Term":"Container Registry","Description":"A container registry is a repository where container images are stored and managed. It allows you to store, version, and distribute Docker or other container images for use in deploying applications.",
    "References":"https://docs.docker.com/glossary/?term=registry"},
    {"ID#":26, "Term":" Docker Compose","Description":"Docker Hub is a cloud-based registry service by Docker that hosts a vast collection of public and private Docker images. It allows developers to share and distribute container images easily.",
    "References":"https://hub.docker.com/"},
    {"ID#":27, "Term":" Containerization","Description":"Containerization is a technology that packages an application and its dependencies into a container image, allowing for consistent and isolated execution across different environments. Containers are portable and lightweight, making them ideal for deployment and scaling.",
    "References":"https://www.docker.com/resources/what-container"},
    {"ID#":28, "Term":"Registry ","Description":"An image registry is a repository for storing container images, allowing for their distribution and retrieval. Docker Hub, Google Container Registry (GCR), and Amazon Elastic Container Registry (ECR) are examples of image registries.",
    "References":"https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html"},
    {"ID#":29, "Term":" Docker Container ","Description":"A Docker container is a lightweight, standalone, and executable package that contains an application and its dependencies. Containers provide isolation, portability, and reproducibility, allowing applications to run consistently across different environments.",
    "References":"https://www.docker.com/resources/what-container"},
    
    {"ID#":30, "Term":"Docker Build","Description":"Docker Build is a command that creates a Docker image from a Dockerfile. A Dockerfile is a text file that contains instructions for building an image, including the base image, dependencies, and application code.",
    "References":"https://docs.docker.com/engine/reference/commandline/build/"},
    {"ID#":31, "Term":"Terraform","Description":"Terraform is an open-source infrastructure as code (IaC) tool developed by HashiCorp. It allows you to define and provision infrastructure resources, such as virtual machines, networks, and databases, in a declarative manner using code.",
    "References":"https://www.terraform.io/intro/index.html"},
    {"ID#":32, "Term":"Provider","Description":"n Terraform, a provider is a plugin that enables interaction with specific cloud or infrastructure platforms, such as AWS, Azure, or Google Cloud. Providers define the resources that Terraform can manage within those platforms.",
    "References":"https://www.terraform.io/docs/providers/index.html"},
    {"ID#":33, "Term":"Resource","Description":"A resource in Terraform represents an infrastructure object, such as a virtual machine, database, or network. Resources are defined in Terraform configurations and managed by Terraform according to the desired state.",
    "References":"https://www.terraform.io/docs/configuration/resources.html"},
    {"ID#":34, "Term":"Module","Description":"A module in Terraform is a self-contained set of Terraform configurations that can be reused to provision infrastructure resources. Modules promote code reusability and maintainability by encapsulating and abstracting infrastructure components.",
    "References":"https://www.terraform.io/docs/modules/index.html"},
    {"ID#":35, "Term":"Plan","Description":" A Terraform plan is a preview of the changes that Terraform will make to the infrastructure based on the current configuration and state. It allows you to review and verify the intended changes before applying them.",
    "References":"https://www.terraform.io/docs/cli/commands/plan.html"},
    {"ID#":36, "Term":"Apply","Description":"In Terraform, the apply command is used to create, update, or delete infrastructure resources based on the Terraform configuration. It executes the changes defined in the configuration.",
    "References":"https://www.terraform.io/docs/cli/commands/apply.html"},
    {"ID#":37, "Term":"Variables","Description":"Terraform outputs allow you to define values in your Terraform configurations that can be displayed after an apply operation. Outputs can provide information about resource attributes, making it easier to access results.",
    "References":"https://www.terraform.io/docs/configuration/outputs.html"},
    {"ID#":38, "Term":"Backend Configuration","Description":"Backend configuration in Terraform refers to the settings that determine how Terraform stores and retrieves the state file. Examples include local state files, remote state backends (like AWS S3 or HashiCorp Consul), and configuration for locking and encryption.",
    "References":"https://www.terraform.io/docs/backends/index.html"},
    {"ID#":39, "Term":"Provisioner","Description":"Workspaces in Terraform allow you to create isolated environments within a single configuration. They are useful for managing multiple instances of the same infrastructure for different purposes, such as development, testing, and production.",
    "References":"https://www.terraform.io/docs/state/workspaces.html"},
    {"ID#":40, "Term":"Terraform Cloud","Description":"Terraform Cloud is a cloud-based platform provided by HashiCorp that offers collaborative features for Terraform users. It includes remote state management, collaboration tools, and automation capabilities.",
    "References":"https://www.terraform.io/cloud"}
    
    
    {"ID#":41, "Term":"Kubernetes Pod","Description":"A Kubernetes Pod is the smallest deployable unit in a Kubernetes cluster. It represents a single instance of a running process in the cluster and can contain one or more containers that share network and storage resources.",
    "References":"https://kubernetes.io/docs/concepts/workloads/pods/"},
    {"ID#":42, "Term":"Container Registry","Description":"A container registry is a service or repository for storing and distributing container images. It allows developers to publish, share, and pull container images used in containerized applications.",
    "References":"https://hub.docker.com/"},
    {"ID#":43, "Term":"Database Server","Description":"A database server is a computer system or cloud-based service dedicated to managing and serving databases. It handles database storage, retrieval, and management, providing access to structured data.",
    "References":"https://www.oracle.com/database/what-is-database/"},
    {"ID#":44, "Term":"Kubernetes Cluster","Description":"A Kubernetes cluster is a set of physical or virtual machines that run containerized applications managed by Kubernetes. It consists of master and worker nodes and provides orchestration and scaling capabilities for containers.",
    "References":"https://kubernetes.io/docs/concepts/overview/components/"},
    {"ID#":45, "Term":"Load Balancer","Description":"A load balancer is a networking component used to distribute incoming network traffic across multiple servers or instances. In Kubernetes, it helps evenly distribute traffic among pods or services.",
    "References":"https://aws.amazon.com/elasticloadbalancing/"},
    {"ID#":46, "Term":"ReplicaSet","Description":"In Kubernetes, a ReplicaSet is a resource that ensures a specified number of pod replicas are running at all times. It helps with scaling and maintaining the desired number of identical pods.",
    "References":"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"},
    {"ID#":47, "Term":"Database Cluster","Description":"A database cluster is a group of interconnected database servers or nodes working together to provide high availability, fault tolerance, and scalability for database services. It is commonly used for distributed databases.",
    "References":"https://www.mongodb.com/docs/manual/sharding/"},
    {"ID#":48, "Term":"RabbitMQ","Description":"RabbitMQ is an open-source message broker software that facilitates communication between different parts of a distributed application by implementing message queues. It is widely used for message-oriented middleware.",
    "References":"https://www.rabbitmq.com/"},
    {"ID#":49, "Term":"Ingress Controller","Description":"In Kubernetes, an Ingress Controller is a resource responsible for managing external access to services within the cluster. It allows you to define routing rules, SSL termination, and load balancing for HTTP and HTTPS traffic.",
    "References":"https://kubernetes.io/docs/concepts/services-networking/ingress/"},
    {"ID#":50, "Term":"Database Replication","Description":"Database replication is the process of copying and synchronizing data from one database server to one or more replica servers. It ensures data redundancy, fault tolerance, and improved read scalability in database systems.",
    "References":"https://dev.mysql.com/doc/refman/8.0/en/replication.html"}

    ]